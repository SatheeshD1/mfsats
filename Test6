import org.springframework.batch.item.database.JdbcBatchItemWriter;
import org.springframework.batch.item.database.builder.JdbcBatchItemWriterBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import javax.sql.DataSource;
import java.util.List;
import java.util.Map;
import java.util.concurrent.atomic.AtomicInteger;

@Service
public class BatchInsertService {

    private final NamedParameterJdbcTemplate jdbcTemplate;
    private final DataSource dataSource;
    private static final int BATCH_SIZE = 10000; // Adjust as needed

    @Autowired
    public BatchInsertService(NamedParameterJdbcTemplate jdbcTemplate, DataSource dataSource) {
        this.jdbcTemplate = jdbcTemplate;
        this.dataSource = dataSource;
    }

    @Transactional
    public int batchInsert(List<Map<String, Object>> records) {
        AtomicInteger totalInserted = new AtomicInteger(0);

        JdbcBatchItemWriter<Map<String, Object>> writer = new JdbcBatchItemWriterBuilder<Map<String, Object>>()
                .dataSource(dataSource)
                .sql("INSERT INTO your_table (ref_id, template_id, crtr_cd, pymt_type, uetr, txrcvddttm, creation_time) " +
                     "VALUES (:ref_id, :template_id, :crtr_cd, :pymt_type, :uetr, :txrcvddttm, :creation_time)")
                .itemSqlParameterSourceProvider(item -> new MapSqlParameterSource(item))
                .build();

        writer.afterPropertiesSet();

        for (int i = 0; i < records.size(); i += BATCH_SIZE) {
            List<Map<String, Object>> batch = records.subList(i, Math.min(i + BATCH_SIZE, records.size()));
            try {
                writer.write(batch);
                totalInserted.addAndGet(batch.size());
                System.out.println("Inserted batch: " + batch.size() + ", Total: " + totalInserted.get());
            } catch (Exception e) {
                System.err.println("Error inserting batch starting at index " + i + ": " + e.getMessage());
                // Consider implementing retry logic or skipping problematic records
            }
        }

        return totalInserted.get();
    }
}

import React from 'react';

// SVG Icons as components
const SearchIcon = () => (
  <svg 
    viewBox="0 0 24 24" 
    width="16" 
    height="16" 
    stroke="currentColor" 
    strokeWidth="2" 
    fill="none" 
    strokeLinecap="round" 
    strokeLinejoin="round"
  >
    <circle cx="11" cy="11" r="8"/>
    <line x1="21" y1="21" x2="16.65" y2="16.65"/>
  </svg>
);

const SortIcon = () => (
  <svg 
    viewBox="0 0 24 24" 
    width="16" 
    height="16" 
    stroke="currentColor" 
    strokeWidth="2" 
    fill="none" 
    strokeLinecap="round" 
    strokeLinejoin="round"
  >
    <line x1="12" y1="5" x2="12" y2="19"/>
    <polyline points="19 12 12 19 5 12"/>
    <polyline points="5 12 12 5 19 12"/>
  </svg>
);

class DataTable extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      columnFilters: {},
      sortConfig: {
        key: null,
        direction: 'ascending'
      }
    };
  }

  handleColumnSearch = (columnKey, value) => {
    this.setState(prevState => ({
      columnFilters: {
        ...prevState.columnFilters,
        [columnKey]: value
      }
    }));
  };

  handleSort = (key) => {
    const direction = this.state.sortConfig.key === key && 
      this.state.sortConfig.direction === 'ascending' ? 'descending' : 'ascending';
    this.setState({
      sortConfig: { key, direction }
    });
  };

  getFilteredAndSortedData = () => {
    const { data } = this.props;
    const { columnFilters, sortConfig } = this.state;

    let filteredData = [...data];

    // Apply column filters
    Object.keys(columnFilters).forEach(columnKey => {
      const filterValue = columnFilters[columnKey];
      if (filterValue) {
        filteredData = filteredData.filter(item =>
          String(item[columnKey])
            .toLowerCase()
            .includes(filterValue.toLowerCase())
        );
      }
    });

    // Apply sorting
    if (sortConfig.key) {
      filteredData.sort((a, b) => {
        if (a[sortConfig.key] < b[sortConfig.key]) {
          return sortConfig.direction === 'ascending' ? -1 : 1;
        }
        if (a[sortConfig.key] > b[sortConfig.key]) {
          return sortConfig.direction === 'ascending' ? 1 : -1;
        }
        return 0;
      });
    }

    return filteredData;
  };

  render() {
    const { columns } = this.props;
    const { columnFilters } = this.state;

    return (
      <div className="w-full">
        <div className="overflow-x-auto">
          <table className="w-full border-collapse">
            <thead>
              <tr className="bg-blue-900 text-white">
                {columns.map((column) => (
                  <th key={column.key} className="p-3 border-r border-blue-800 last:border-r-0">
                    <div className="flex flex-col space-y-2">
                      <div 
                        className="flex items-center justify-between cursor-pointer hover:bg-blue-800"
                        onClick={() => this.handleSort(column.key)}
                      >
                        <span>{column.label}</span>
                        <SortIcon />
                      </div>
                      <div className="flex items-center bg-white rounded">
                        <span className="text-gray-500 ml-2">
                          <SearchIcon />
                        </span>
                        <input
                          type="text"
                          placeholder={`Search ${column.label}...`}
                          value={columnFilters[column.key] || ''}
                          onChange={(e) => this.handleColumnSearch(column.key, e.target.value)}
                          className="w-full p-1 text-sm text-gray-700 bg-transparent outline-none"
                        />
                      </div>
                    </div>
                  </th>
                ))}
              </tr>
            </thead>
            <tbody>
              {this.getFilteredAndSortedData().map((row, index) => (
                <tr
                  key={index}
                  className={`
                    border-b border-gray-200
                    ${index % 2 === 0 ? 'bg-white' : 'bg-gray-50'}
                    hover:bg-gray-100
                  `}
                >
                  {columns.map((column) => (
                    <td key={column.key} className="p-3 border-r border-gray-200 last:border-r-0">
                      {row[column.key]}
                    </td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </div>
    );
  }
}

// Demo component with sample data
const DataTableDemo = () => {
  const columns = [
    { key: 'sno', label: 'Sno' },
    { key: 'uetr', label: 'UETR' },
    { key: 'action', label: 'Action' },
    { key: 'transactionStatus', label: 'Transaction Status' },
    { key: 'transactionType', label: 'Transaction Type' },
    { key: 'modifierType', label: 'Modifier Type' },
    { key: 'modifiedBy', label: 'Modified By' },
    { key: 'modifiedDate', label: 'Modified Date' },
    { key: 'errorCode', label: 'Error Code' }
  ];

  const data = [
    {
      sno: '1',
      uetr: '29fe2b89-eb82-4754-b8da-f7eda4c34101',
      action: 'UETR generation and Moved to DB Persist',
      transactionStatus: 'In Progress',
      transactionType: 'Received',
      modifierType: 'SYSTEM',
      modifiedBy: 'Router',
      modifiedDate: '11/02/2025 19:57:57',
      errorCode: ''
    },
    {
      sno: '2',
      uetr: '45ab3c12-cd45-6789-ef01-234567890def',
      action: 'Payment Processing',
      transactionStatus: 'Completed',
      transactionType: 'Sent',
      modifierType: 'USER',
      modifiedBy: 'John Doe',
      modifiedDate: '12/02/2025 10:30:15',
      errorCode: ''
    },
    {
      sno: '3',
      uetr: '78cd4e56-gh90-1234-ij56-789012345klm',
      action: 'Validation Failed',
      transactionStatus: 'Failed',
      transactionType: 'Received',
      modifierType: 'SYSTEM',
      modifiedBy: 'Validator',
      modifiedDate: '12/02/2025 14:22:33',
      errorCode: 'ERR_001'
    }
  ];

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">Transaction History</h1>
      <DataTable columns={columns} data={data} />
    </div>
  );
};

export default DataTableDemo;

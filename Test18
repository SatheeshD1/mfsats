import React, { Component } from 'react';
import Select from 'react-select';

const options = [
  { value: 'maker', label: 'Maker' },
  { value: 'checker', label: 'Checker' },
  { value: 'viewer', label: 'Viewer' },
];

class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      selectedOption: null,
      menuIsOpen: false, // State to control dropdown open/close
    };
    this.selectRef = React.createRef(); // Create a ref for the Select component
  }

  // Handle change in selection
  handleChange = (selectedOption) => {
    this.setState({ selectedOption });
  };

  // Programmatically open the dropdown
  openDropdown = () => {
    this.setState({ menuIsOpen: true }, () => {
      // Focus the select component to ensure the dropdown is interactable
      if (this.selectRef.current) {
        this.selectRef.current.focus();
      }
    });
  };

  // Handle keydown event for Ctrl+Shift+U
  handleKeyDown = (event) => {
    // Check for Ctrl + Shift + U
    if (event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 'u') {
      event.preventDefault(); // Prevent default browser behavior
      this.openDropdown();
    }
  };

  // Set up event listener on mount
  componentDidMount() {
    document.addEventListener('keydown', this.handleKeyDown);
  }

  // Clean up event listener on unmount
  componentWillUnmount() {
    document.removeEventListener('keydown', this.handleKeyDown);
  }

  // Handle menu close to sync state
  handleMenuClose = () => {
    this.setState({ menuIsOpen: false });
  };

  render() {
    const { selectedOption, menuIsOpen } = this.state;

    return (
      <div className="container" style={{ padding: '20px', maxWidth: '400px' }}>
        <h3>React-Select Dropdown</h3>
        <Select
          ref={this.selectRef}
          value={selectedOption}
          onChange={this.handleChange}
          options={options}
          placeholder="Select a role..."
          menuIsOpen={menuIsOpen} // Control dropdown open state
          onMenuClose={this.handleMenuClose} // Reset state when menu closes
        />
      </div>
    );
  }
}

export default App;













import React, { Component } from 'react';
import { AgGridReact } from 'ag-grid-react';
import 'ag-grid-community/styles/ag-grid.css';
import 'ag-grid-community/styles/ag-theme-alpine.css';
import 'ag-grid-enterprise'; // Required for enterprise features like clipboard

class AgGridComponent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      columnDefs: [
        { headerName: 'ID', field: 'id', editable: true, sortable: true, filter: true },
        { headerName: 'Name', field: 'name', editable: true, sortable: true, filter: true },
        { headerName: 'Age', field: 'age', editable: true, sortable: true, filter: true },
      ],
      rowData: [
        { id: 1, name: 'John Doe', age: 30 },
        { id: 2, name: 'Jane Smith', age: 25 },
        { id: 3, name: 'Sam Brown', age: 40 },
      ],
      defaultColDef: {
        flex: 1,
        minWidth: 100,
        editable: true, // Enable cell editing
        resizable: true,
      },
    };
  }

  onGridReady = (params) => {
    this.gridApi = params.api;
    this.gridColumnApi = params.columnApi;
    // Ensure grid is focused to capture keyboard events
    params.api.setFocusedCell(0, 'id');
  };

  render() {
    return (
      <div style={{ height: '500px', width: '100%' }} className="ag-theme-alpine">
        <AgGridReact
          columnDefs={this.state.columnDefs}
          rowData={this.state.rowData}
          defaultColDef={this.state.defaultColDef}
          onGridReady={this.onGridReady}
          // Enable key grid options for shortcuts
          rowSelection="multiple" // Enables multi-row selection (Shift + Space, Ctrl + A)
          enableRangeSelection={true} // Enables range selection (Ctrl + Click, Shift + Arrow)
          enableFillHandle={true} // Enables fill handle for copying/dragging values
          undoRedoCellEditing={true} // Enables Ctrl + Z / Ctrl + Y for undo/redo
          enableCellTextSelection={true} // Allows text selection in cells
          clipboardOptions={{
            copyHeadersToClipboard: true, // Ctrl + C copies headers
            pasteFromClipboard: true, // Ctrl + V pastes from clipboard
          }}
          // Ensure keyboard navigation is enabled (default is true)
          suppressKeyboardEvent={(params) => false} // Allow all keyboard events
        />
      </div>
    );
  }
}

export default AgGridComponent;















import React, { useState } from 'react';
import { Rnd } from 'react-rnd';

const DraggableComponent = () => {
  const [position, setPosition] = useState({ x: 0, y: 0 });

  const handleDrag = (e, d) => {
    // Define custom boundaries
    const topBoundary = 50; // e.g., 50px from the top
    const bottomBoundary = 400; // e.g., 400px from the top
    const leftBoundary = 0; // e.g., 0px from the left
    const rightBoundary = 600; // e.g., 600px from the left (adjust based on parent width)

    // Calculate new position within boundaries
    const newX = Math.max(leftBoundary, Math.min(d.x, rightBoundary));
    const newY = Math.max(topBoundary, Math.min(d.y, bottomBoundary));

    setPosition({ x: newX, y: newY });
  };

  return (
    <div style={{ width: '100%', height: '500px', position: 'relative' }}>
      <Rnd
        bounds="parent"
        position={position}
        onDrag={handleDrag}
        onDragStop={(e, d) => setPosition({ x: d.x, y: d.y })}
        size={{ width: 200, height: 200 }}
      >
        <div style={{ width: '100%', height: '100%', background: 'lightblue' }}>
          Drag me!
        </div>
      </Rnd>
    </div>
  );
};

export default DraggableComponent;


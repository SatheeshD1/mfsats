import React, { useState, useEffect, useMemo, forwardRef, useImperativeHandle } from 'react';
import Flatpickr from 'react-flatpickr';
import 'flatpickr/dist/themes/material_green.css';

// Custom Date Filter Component for AG Grid
const DateFilter = forwardRef((props, ref) => {
  const [date, setDate] = useState(null);
  const [filterType, setFilterType] = useState('equals');

  useImperativeHandle(ref, () => {
    return {
      doesFilterPass(params) {
        if (!date) return true;
        
        const cellValue = params.data[props.colDef.field];
        if (!cellValue) return false;
        
        // Parse the cell date (assuming DD/MM/YYYY format)
        const cellDate = new Date(cellValue.split('/').reverse().join('-'));
        const filterDate = new Date(date);
        
        // Set time to 00:00:00 for date comparison
        cellDate.setHours(0, 0, 0, 0);
        filterDate.setHours(0, 0, 0, 0);
        
        switch (filterType) {
          case 'equals':
            return cellDate.getTime() === filterDate.getTime();
          case 'greaterThan':
            return cellDate.getTime() > filterDate.getTime();
          case 'lessThan':
            return cellDate.getTime() < filterDate.getTime();
          default:
            return true;
        }
      },
      
      isFilterActive() {
        return date !== null;
      },
      
      getModel() {
        if (!this.isFilterActive()) return null;
        return { date, filterType };
      },
      
      setModel(model) {
        if (model) {
          setDate(model.date);
          setFilterType(model.filterType);
        } else {
          setDate(null);
          setFilterType('equals');
        }
      }
    };
  });

  const onDateChange = (selectedDates) => {
    const newDate = selectedDates[0] || null;
    if (newDate !== date) {
      setDate(newDate);
      props.filterChangedCallback();
    }
  };

  const onFilterTypeChange = (e) => {
    const newType = e.target.value;
    if (newType !== filterType) {
      setFilterType(newType);
      props.filterChangedCallback();
    }
  };

  return (
    <div className="p-3 bg-white border border-gray-200 rounded shadow-lg" style={{ minWidth: '250px' }}>
      <div className="mb-3">
        <label className="block text-sm font-medium text-gray-700 mb-1">Filter Type</label>
        <select 
          value={filterType} 
          onChange={onFilterTypeChange}
          className="w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-blue-500"
        >
          <option value="equals">Equals</option>
          <option value="greaterThan">Greater Than</option>
          <option value="lessThan">Less Than</option>
        </select>
      </div>
      
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Select Date</label>
        <Flatpickr
          value={date}
          onChange={onDateChange}
          options={{
            dateFormat: "d/m/Y",
            allowInput: true,
            clickOpens: true,
          }}
          className="w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-blue-500"
          placeholder="DD/MM/YYYY"
        />
      </div>
      
      <div className="mt-3 flex gap-2">
        <button
          onClick={() => {
            setDate(null);
            setFilterType('equals');
            props.filterChangedCallback();
          }}
          className="px-3 py-1 text-xs bg-gray-500 text-white rounded hover:bg-gray-600"
        >
          Clear
        </button>
      </div>
    </div>
  );
});

// Custom DateTime Filter Component for AG Grid
const DateTimeFilter = forwardRef((props, ref) => {
  const [dateTime, setDateTime] = useState(null);
  const [filterType, setFilterType] = useState('equals');

  useImperativeHandle(ref, () => {
    return {
      doesFilterPass(params) {
        if (!dateTime) return true;
        
        const cellValue = params.data[props.colDef.field];
        if (!cellValue) return false;
        
        // Parse the cell datetime (assuming DD/MM/YYYY HH:MM:SS format)
        const [datePart, timePart] = cellValue.split(' ');
        const [day, month, year] = datePart.split('/');
        const cellDate = new Date(`${year}-${month}-${day} ${timePart}`);
        const filterDate = new Date(dateTime);
        
        switch (filterType) {
          case 'equals':
            return Math.abs(cellDate.getTime() - filterDate.getTime()) < 1000; // 1 second tolerance
          case 'greaterThan':
            return cellDate.getTime() > filterDate.getTime();
          case 'lessThan':
            return cellDate.getTime() < filterDate.getTime();
          default:
            return true;
        }
      },
      
      isFilterActive() {
        return dateTime !== null;
      },
      
      getModel() {
        if (!this.isFilterActive()) return null;
        return { dateTime, filterType };
      },
      
      setModel(model) {
        if (model) {
          setDateTime(model.dateTime);
          setFilterType(model.filterType);
        } else {
          setDateTime(null);
          setFilterType('equals');
        }
      }
    };
  });

  const onDateTimeChange = (selectedDates) => {
    const newDateTime = selectedDates[0] || null;
    if (newDateTime !== dateTime) {
      setDateTime(newDateTime);
      props.filterChangedCallback();
    }
  };

  const onFilterTypeChange = (e) => {
    const newType = e.target.value;
    if (newType !== filterType) {
      setFilterType(newType);
      props.filterChangedCallback();
    }
  };

  return (
    <div className="p-3 bg-white border border-gray-200 rounded shadow-lg" style={{ minWidth: '280px' }}>
      <div className="mb-3">
        <label className="block text-sm font-medium text-gray-700 mb-1">Filter Type</label>
        <select 
          value={filterType} 
          onChange={onFilterTypeChange}
          className="w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-blue-500"
        >
          <option value="equals">Equals</option>
          <option value="greaterThan">After</option>
          <option value="lessThan">Before</option>
        </select>
      </div>
      
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Select Date & Time</label>
        <Flatpickr
          value={dateTime}
          onChange={onDateTimeChange}
          options={{
            enableTime: true,
            dateFormat: "d/m/Y H:i:S",
            time_24hr: true,
            allowInput: true,
            clickOpens: true,
          }}
          className="w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-blue-500"
          placeholder="DD/MM/YYYY HH:MM:SS"
        />
      </div>
      
      <div className="mt-3 flex gap-2">
        <button
          onClick={() => {
            setDateTime(null);
            setFilterType('equals');
            props.filterChangedCallback();
          }}
          className="px-3 py-1 text-xs bg-gray-500 text-white rounded hover:bg-gray-600"
        >
          Clear
        </button>
      </div>
    </div>
  );
});

// Custom Time-only Filter Component
const TimeFilter = forwardRef((props, ref) => {
  const [time, setTime] = useState(null);
  const [filterType, setFilterType] = useState('equals');

  useImperativeHandle(ref, () => {
    return {
      doesFilterPass(params) {
        if (!time) return true;
        
        const cellValue = params.data[props.colDef.field];
        if (!cellValue) return false;
        
        // Extract time from cell value (assuming it contains time)
        let cellTime;
        if (cellValue.includes(' ')) {
          cellTime = cellValue.split(' ')[1]; // Get time part from "DD/MM/YYYY HH:MM:SS"
        } else {
          cellTime = cellValue; // Assume it's already time format "HH:MM:SS"
        }
        
        const filterTime = time.toTimeString().split(' ')[0]; // Get "HH:MM:SS" format
        
        switch (filterType) {
          case 'equals':
            return cellTime === filterTime;
          case 'greaterThan':
            return cellTime > filterTime;
          case 'lessThan':
            return cellTime < filterTime;
          default:
            return true;
        }
      },
      
      isFilterActive() {
        return time !== null;
      },
      
      getModel() {
        if (!this.isFilterActive()) return null;
        return { time, filterType };
      },
      
      setModel(model) {
        if (model) {
          setTime(model.time);
          setFilterType(model.filterType);
        } else {
          setTime(null);
          setFilterType('equals');
        }
      }
    };
  });

  const onTimeChange = (selectedDates) => {
    const newTime = selectedDates[0] || null;
    if (newTime !== time) {
      setTime(newTime);
      props.filterChangedCallback();
    }
  };

  const onFilterTypeChange = (e) => {
    const newType = e.target.value;
    if (newType !== filterType) {
      setFilterType(newType);
      props.filterChangedCallback();
    }
  };

  return (
    <div className="p-3 bg-white border border-gray-200 rounded shadow-lg" style={{ minWidth: '250px' }}>
      <div className="mb-3">
        <label className="block text-sm font-medium text-gray-700 mb-1">Filter Type</label>
        <select 
          value={filterType} 
          onChange={onFilterTypeChange}
          className="w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-blue-500"
        >
          <option value="equals">Equals</option>
          <option value="greaterThan">After</option>
          <option value="lessThan">Before</option>
        </select>
      </div>
      
      <div>
        <label className="block text-sm font-medium text-gray-700 mb-1">Select Time</label>
        <Flatpickr
          value={time}
          onChange={onTimeChange}
          options={{
            enableTime: true,
            noCalendar: true,
            dateFormat: "H:i:S",
            time_24hr: true,
            defaultHour: 0,
            defaultMinute: 0,
            minuteIncrement: 1
          }}
          className="w-full px-2 py-1 border border-gray-300 rounded text-sm focus:outline-none focus:ring-1 focus:ring-blue-500"
          placeholder="00:00:00"
        />
      </div>
      
      <div className="mt-3 flex gap-2">
        <button
          onClick={() => {
            setTime(null);
            setFilterType('equals');
            props.filterChangedCallback();
          }}
          className="px-3 py-1 text-xs bg-gray-500 text-white rounded hover:bg-gray-600"
        >
          Clear
        </button>
      </div>
    </div>
  );
});

// Mock AG Grid components with enhanced filtering
const AgGridReact = ({ columnDefs, rowData, onGridReady, gridOptions, ...props }) => {
  const [selectedRows, setSelectedRows] = useState([]);
  const [filters, setFilters] = useState({});
  const [activeFilter, setActiveFilter] = useState(null);
  const [filterVersion, setFilterVersion] = useState(0);
  
  const handleRowSelect = (rowIndex) => {
    const newSelection = selectedRows.includes(rowIndex) 
      ? selectedRows.filter(i => i !== rowIndex)
      : [...selectedRows, rowIndex];
    setSelectedRows(newSelection);
  };

  const applyFilters = (data) => {
    return data.filter(row => {
      return Object.keys(filters).every(field => {
        const filter = filters[field];
        if (!filter || !filter.isFilterActive()) return true;
        return filter.doesFilterPass({ data: row });
      });
    });
  };

  const filteredData = useMemo(() => applyFilters(rowData), [rowData, filters, filterVersion]);

  const handleFilterClick = (field) => {
    setActiveFilter(activeFilter === field ? null : field);
  };

  const registerFilter = (field, filterRef) => {
    setFilters(prev => {
      if (prev[field] === filterRef) return prev; // Prevent unnecessary updates
      return {
        ...prev,
        [field]: filterRef
      };
    });
  };

  const onFilterChanged = () => {
    setFilterVersion(prev => prev + 1);
  };

  return (
    <div className="ag-theme-alpine" style={{ height: '600px', width: '100%' }}>
      <div className="bg-white border border-gray-300 rounded relative">
        {/* Header */}
        <div className="bg-gray-100 border-b border-gray-300 flex">
          <div className="w-12 p-2 border-r border-gray-300 text-center">
            <input type="checkbox" className="w-4 h-4" />
          </div>
          {columnDefs.map((col, index) => (
            <div 
              key={index} 
              className="flex-1 border-r border-gray-300 relative"
              style={{ minWidth: col.width || 150 }}
            >
              <div className="p-2 font-medium text-sm flex items-center justify-between">
                <span>{col.headerName}</span>
                {col.filter && (
                  <button
                    onClick={() => handleFilterClick(col.field)}
                    className="ml-2 text-blue-600 hover:text-blue-800"
                  >
                    🔽
                  </button>
                )}
              </div>
              
              {/* Filter dropdown */}
              {activeFilter === col.field && col.filter && (
                <div className="absolute top-full left-0 z-50 mt-1">
                  <col.filter
                    ref={(ref) => registerFilter(col.field, ref)}
                    colDef={col}
                    filterChangedCallback={onFilterChanged}
                  />
                </div>
              )}
            </div>
          ))}
        </div>
        
        {/* Rows */}
        {filteredData.map((row, rowIndex) => (
          <div key={rowIndex} className="flex border-b border-gray-200 hover:bg-blue-50">
            <div className="w-12 p-2 border-r border-gray-300 text-center">
              <input 
                type="checkbox" 
                className="w-4 h-4"
                checked={selectedRows.includes(rowIndex)}
                onChange={() => handleRowSelect(rowIndex)}
              />
            </div>
            {columnDefs.map((col, colIndex) => (
              <div 
                key={colIndex} 
                className="flex-1 p-2 border-r border-gray-300 text-sm"
                style={{ minWidth: col.width || 150 }}
              >
                {col.cellRenderer ? col.cellRenderer({ value: row[col.field] }) : row[col.field]}
              </div>
            ))}
          </div>
        ))}
        
        {/* Footer */}
        <div className="bg-gray-50 p-2 text-sm text-gray-600 border-t">
          Rows: {filteredData.length} | Total Records: {rowData.length}
        </div>
      </div>
      
      {/* Click outside to close filters */}
      {activeFilter && (
        <div 
          className="fixed inset-0 z-40" 
          onClick={() => setActiveFilter(null)}
        />
      )}
    </div>
  );
};

const AGGridWithFlatpickr = () => {
  // Sample data matching your screenshot structure
  const [rowData, setRowData] = useState([
    {
      uetr: '2c414e0-160a-4216-a5f5-4d1326434e8c',
      interbankSettlementDate: '23/06/2025',
      transactionReceivedDateTime: '23/06/2025 15:09:41',
      settlementTillTime: '16:00:00'
    },
    {
      uetr: 'e8efb39-ff9a-4a1a-8ac5-95c5adb01195',
      interbankSettlementDate: '23/06/2025',
      transactionReceivedDateTime: '23/06/2025 14:27:27',
      settlementTillTime: '15:30:00'
    },
    {
      uetr: 'e8efb39-ff9a-4a1a-8ac5-95c5adb01210',
      interbankSettlementDate: '24/06/2025',
      transactionReceivedDateTime: '24/06/2025 15:16:22',
      settlementTillTime: '17:00:00'
    },
    {
      uetr: 'e8efb39-ff9a-4a1a-8ac5-95c5adb01211',
      interbankSettlementDate: '24/06/2025',
      transactionReceivedDateTime: '24/06/2025 11:34:21',
      settlementTillTime: '12:00:00'
    },
    {
      uetr: 'e8efb39-ff9a-4a1a-8ac5-95c5adb01213',
      interbankSettlementDate: '25/06/2025',
      transactionReceivedDateTime: '25/06/2025 16:45:18',
      settlementTillTime: '18:00:00'
    },
    {
      uetr: '3ab86704-0494-4169-8d60-2166bf5266ee',
      interbankSettlementDate: '25/06/2025',
      transactionReceivedDateTime: '25/06/2025 09:22:15',
      settlementTillTime: '10:30:00'
    },
    {
      uetr: '7e65e1ce-a5b4-48d7-826f-04274ace6974',
      interbankSettlementDate: '26/06/2025',
      transactionReceivedDateTime: '26/06/2025 13:18:44',
      settlementTillTime: '14:00:00'
    },
    {
      uetr: 'ab6c95c9-f001-460d-bd41-556b0fc9de46',
      interbankSettlementDate: '26/06/2025',
      transactionReceivedDateTime: '26/06/2025 12:33:29',
      settlementTillTime: '13:45:00'
    }
  ]);

  // Column definitions with integrated filters
  const columnDefs = useMemo(() => [
    {
      headerName: 'UETR',
      field: 'uetr',
      width: 280,
      cellRenderer: ({ value }) => (
        <span className="font-mono text-xs">{value}</span>
      )
    },
    {
      headerName: 'Interbank Settlement Date',
      field: 'interbankSettlementDate',
      width: 220,
      filter: DateFilter
    },
    {
      headerName: 'Transaction Received Date Time',
      field: 'transactionReceivedDateTime',
      width: 280,
      filter: DateTimeFilter,
      cellRenderer: ({ value }) => (
        <span className="font-mono text-xs">{value}</span>
      )
    },
    {
      headerName: 'Settlement Till Time',
      field: 'settlementTillTime',
      width: 200,
      filter: TimeFilter,
      cellRenderer: ({ value }) => (
        <span className="font-mono text-xs">{value}</span>
      )
    }
  ], []);

  return (
    <div className="p-6 bg-gray-50 min-h-screen">
      <div className="max-w-7xl mx-auto">
        <h1 className="text-2xl font-bold text-gray-900 mb-6">AG Grid with Integrated Flatpickr Filters</h1>
        
        <div className="bg-white rounded-lg shadow-md p-6">
          <div className="mb-4 text-sm text-gray-600">
            <p>Click the dropdown arrows (🔽) in the column headers to open the date/time filters.</p>
            <p>Each column has a different filter type:</p>
            <ul className="list-disc list-inside mt-2 space-y-1">
              <li><strong>Interbank Settlement Date:</strong> Date-only filter</li>
              <li><strong>Transaction Received Date Time:</strong> Date and time filter</li>
              <li><strong>Settlement Till Time:</strong> Time-only filter</li>
            </ul>
          </div>
          
          <AgGridReact
            columnDefs={columnDefs}
            rowData={rowData}
            rowSelection="multiple"
            suppressRowClickSelection={true}
            animateRows={true}
          />
        </div>
      </div>
    </div>
  );
};

export default AGGridWithFlatpickr;
